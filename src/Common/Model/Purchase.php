<?php
/**
 * Model Common_Model_Purchase
 * 
 * generated by gen-model task.
 */
class Common_Model_Purchase extends Common_Model_Table_Purchase {
    
    //关系映射表
    protected $_relation_map = array(
    );
    /**
     * 默认的magic field
     */
    protected $_magic_field = array();
    
    const DEFAULT_STATUS = 1;
    /**
     * 通过审核标识
     * @var int
     */
    const CHECKED_STATUS = 2;
    /**
     * 拒绝标识
     * 
     * @var int
     */
    const DENY_STATUS = -1;
    /**
     * @return Common_Model_Purchase
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    
    /**
     * beforeValidation事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#beforeValidation()
     */
    public function beforeValidation(){
    	$admin_id = Anole_Util_Cookie::getAdminID();
    	if($this->isNew()){
    		$this->setCreatedBy($admin_id);
    		$this->setCreatedOn(Common_Util_Date::getNow());
    		$this->setStatus(self::DEFAULT_STATUS);
    	}else{
    		$status = $this->getStatus();
    		if($status == self::CHECKED_STATUS){
    			$this->setPublishedBy($admin_id);
    			$this->setPublishedOn(Common_Util_Date::getNow());
    		}
    	}
    }
    
    /**
     * 验证必要的字段值
     * 
     * @return bool
     */
    public function validate(){
        if($this->isNew()){
            $fields = array('product_id','quantity','type');
        }else{
            $fields = array('id');
        }
        if(!$this->validateRequird($fields)){
            return false;
        }
        
        return true;
    }
    /**
     * afterSave事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterSave()
     */
    public function afterSave(){
        $status = $this->getStatus();
        $id = $this->getId();
        //通过审核时，把上货数量更新到库存
        if($status == self::CHECKED_STATUS){
        	$this->updateProductInventory($id);
        }	
    }
    /**
     * 变更产品数量
     * 
     * @param $product_number
     * @param $product_size
     * @param $quantity
     * @return void
     */
    public function updateProductInventory($id=null){
    	$product_inventory = new Common_Model_ProductInventory();
    	
    	$data = $this->findById($id)->getResultArray();
    	
    	$type = $data['type'];
    	$product_number = $data['product_number'];
    	$product_size   = $data['product_size'];
    	$quantity       = $data['quantity'];
    	
    	switch($type){
    		case 1:
    			#上货数量
    	        $product_inventory->setId(null);
    	        $product_inventory->setIsNew(true);
    	        $product_inventory->setProductNumber($product_number);
    	        $product_inventory->setProductSize($product_size);
    	        $product_inventory->setTotalQuantity($quantity);
    	        $product_inventory->setUpdatedOn(Common_Util_Date::getNow());
    	        $product_inventory->save();
    			break;
    		case 2:
    			#退货数量
    			$update_sql = 'UPDATE '.$product_inventory->tablelize().' SET `return_quantity`=`return_quantity`+? WHERE `product_number`=? AND `product_size`=?';
    			$product_inventory->getDba()->execute($update_sql,array($quantity,$product_number,$product_size));
    			break;
    		case 3:
    			#补货数量
    			$update_sql = 'UPDATE '.$product_inventory->tablelize().' SET `total_quantity`=`total_quantity`+? WHERE `product_number`=? AND `product_size`=?';
                $product_inventory->getDba()->execute($update_sql,array($quantity,$product_number,$product_size));
    			break;
    		case -1:
    			#损坏数量
    			$update_sql = 'UPDATE '.$product_inventory->tablelize().' SET `bad_quantity`=`bad_quantity`+? WHERE `product_number`=? AND `product_size`=?';
                $product_inventory->getDba()->execute($update_sql,array($quantity,$product_number,$product_size));
    			break;
    		default:
    			break;
    	}
    	
    }
    
    
}
/**vim:sw=4 et ts=4 **/
?>