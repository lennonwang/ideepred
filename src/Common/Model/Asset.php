<?php
/**
 * Model Common_Model_Asset
 * 
 * generated by gen-model task.
 */
class Common_Model_Asset extends Common_Model_Table_Asset {
	
	private $_domain = 'asset';
	
	protected $_tmp_file;
	
	protected $_input_name = 'greare';
    
    //关系映射表
    protected $_relation_map = array();
    /**
     * 默认的magic field
     */
    protected $_magic_field = array(
        'asset_url'=>'_getAssetUrl',
        'water_image'=>'_getWatetImage',
        'asset_path'=>'_getAssetPath'
    );
    
    protected $_water_mark = 0;

	protected $_water_image = null;
    
    /**
     * @return Common_Model_Asset
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    /**
     * beforeValidation验证
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#beforeValidation()
     */
    public function beforeValidation(){
    	if($this->isNew()){
    		$this->setCreatedOn(date('Y-m-d H:i:s'));
    	}
    }
    /**
     * afterValidation验证
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterValidation()
     */
    public function afterValidation(){
    	
    	if($this->isNew()){
	    	$domain = $this->getDomain();
	        if(empty($domain)){
	            $this->setDomain($this->getCustomDomain());
	        }
	        //创建自定义存储路径
            $this->buildAssetPath($this->getInputName(),$this->getFileName());
    	}
    	
    }
    /**
     * afterSave事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterSave()
     */
    public function afterCreate(){
    	//存储文件到后端存储域
    	$tmp_file = $this->getTmpFile();
    	$path = $this->getPath();
    	$water_mark = $this->getWaterMark();
    	$domain = $this->getCustomDomain();
    	
    	try{
    		Common_Util_Storage::storeAsset($domain,$path,$tmp_file);
    		if($water_mark){
				//$this->_water_image = Anole_Config::get('runtime.water.image');
				$water_image = Anole_Config::get('storage.watermark');
				self::warn("path[$path] and domain[$domain] mark and [$water_image]...", __METHOD__);
                
    			Common_Util_Asset::makeDraw($path,$domain,$water_image);
    		}
    	}catch(Common_Util_Exception $e){
    		self::warn("Storage File[$path] domain[$this->_domain] failed!", __METHOD__);
    		throw new Common_Model_Exception("Storage File[$path] domain[$this->_domain] failed!");
    	}
    }
    /**
     * afterDestroy事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterDestroy()
     */
    public function afterDestroy(){
        //当附件被删除时，删除后端存储域文件
        $domain = $this->getDomain();
        $path = $this->getPath();
        self::warn("rm asset file and domain[$domain]、path[$path].", __METHOD__);
        
        //remove local file
        Common_Util_Storage::deleteAsset($domain,$path);
        
        parent::afterDestroy();
    }
    /**
     * 依照一定的规则构建附件存储路径path
     *
     * @param string $key
     * @param string $file_name
     */
    public function buildAssetPath($key,$file_name){
        $ext = Anole_Util_File::getFileExtension($file_name);
        $path = date('ymd').'/'.$key.'_'.hash('md5',$file_name.'_'.time()).'.'.$ext;
        //set record path
        $this->setPath($path);
    }
    
    /**
     * 获取符合的附件列表
     * 
     * @param int
     * @param int
     * @return Common_Model_Asset
     */
    public function fetchAssetList($parent_id,$parent_type){
    	if(is_null($parent_id) || is_null($parent_type)){
    		self::warn("parent_id or parent_type is Null!", __METHOD__);
    		return $this;
    	}
    	$options = array(
    	   'condition'=>'parent_id=? AND parent_type=?',
    	   'order'=>'created_on DESC',
    	   'vars'=>array($parent_id,$parent_type)
    	);
    	return $this->find($options);
    }
    
    /**
     * 获取附件的url
     *
     * @return string
     */
    protected function _getAssetUrl(){
        return Common_Util_Storage::getAssetUrl($this->getDomain(),$this->getPath());
    }
    /**
     * 获取附件的路径
     *
     * @return string
     */
    protected function _getAssetPath(){
        return Common_Util_Storage::getAssetPath($this->getDomain(),$this->getPath());
    }
    /**
     * 获取水印图
     * 
     * @return string
     */
    public function _getWatetImage(){
        return Common_Util_Asset::fetchWatetImage($this->getDomain(),$this->getPath());
    }
    /**
     * set domain value
     *
     * @param string $domain
     * @return Common_Model_Asset
     */
    public function setCustomDomain($domain){
    	$this->_domain = $domain;
    	return $this;
    }
    /**
     * get domain
     *
     * @return string
     */
    public function getCustomDomain(){
    	return $this->_domain;
    }
    /**
     * set tmp file path
     *
     * @param string $tmp_file
     * @return Common_Model_Asset
     */
    public function setTmpFile($tmp_file){
    	$this->_tmp_file = $tmp_file;
    	return $this;
    }
    /**
     * get tmp file path
     *
     * @return string
     */
    public function getTmpFile(){
    	return $this->_tmp_file;
    }
    /**
     * set upload file input name 
     *
     * @param string $name
     * @return Common_Model_Asset
     */
    public function setInputName($name){
    	$this->_input_name = $name;
    	return $this;
    }
    /**
     * get upload file input name
     *
     * @return string
     */
    public function getInputName(){
    	return $this->_input_name;
    }
    /**
     * set water mark
     * 
     * @param $v
     * @return Common_Model_Asset
     */
    public function setWaterMark($v){
    	$this->_water_mark = $v;
    	return $this;
    }
    public function getWaterMark(){
    	return $this->_water_mark;
    }
}
/**vim:sw=4 et ts=4 **/
?>