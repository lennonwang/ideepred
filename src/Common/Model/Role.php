<?php
/**
 * Model Common_Model_Role
 * 
 * generated by gen-model task.
 */
class Common_Model_Role extends Common_Model_Table_Role {
    
    //关系映射表
    protected $_relation_map = array(
        'acl'=>array(
            'type'=>self::HAS_MANY,
            'class'=>'Common_Model_Acl',
            'foreign_key'=>'role_id'
        )
    );
    /**
     * 默认的magic field
     */
    protected $_magic_field = array();
    //1 正常；0 关闭；
    const DEFAULT_STATE = 1;
    
    private $_permissions = array();
    /**
     * @return Common_Model_Role
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    
    public function validate(){
    	if($this->isNew()){
    		$fields = array('name');
    	}else{
    		$fields = array('id');
    	}
    	if(!$this->validateRequird($fields)){
    		return False;
    	}
    	if($this->isNew() && !is_null($this->getName())){
    		if($this->_hasRepeat()){
    			return False;
    		}
    	}
    	return True;
    }
    /**
     * AfterSave 事件
     */
    public function afterSave(){
        $this->_updateRoleAcl();	
    }
    /**
     * validate role_name isn't repeat
     *
     * @param string $name
     * @return bool
     */
    protected function _hasRepeat($name=null){
    	if(is_null($name)){
    		$name = $this->getName();
    	}
    	if($this->hasIf('name=?',array($name))){
    		self::warn("Role name[$name] has exist!", __METHOD__);
    		$this->pushValidateError("Role name[$name] has exist!");
    		return True;
    	}
    	return False;
    }
    /**
     * save role permissions
     *
     * @param mixed $permiss_id
     */
    public function addPermissions($permiss_id){
        if(!empty($permiss_id)){
        	if(is_array($permiss_id)){
        		$this->_permissions = $permiss_id;
        	}else{
        		$this->_permissions[] = $permiss_id;
        	}
        }
        
        return $this;
    }
    /**
     * Update role privilege list
     *
     * @return mixed
     */
    protected function _updateRoleAcl(){
    	$_id = $this->getId();
    	if(empty($_id)){
    		self::warn("Save role acl and role id is Null.", __METHOD__);
    		return $this;
    	}
    	if(empty($this->_permissions)){
    		self::warn("Save role acl and permission is Null.", __METHOD__);
    		return $this;
    	}
    	
    	$permission = new Common_Model_Permission();
    	$acl = new Common_Model_Acl();
    	
    	//first,delete last privilege
    	$acl->removeAllowPermission($_id);
    	
    	//second,add new privilege
    	foreach($this->_permissions as $id){
    		$permission->findById($id);
    		
    		$acl->setIsNew(True);
    		
    		$acl->setId(null);
    		$acl->setRoleId($_id);
    		$acl->setResource($permission['resource']);
    		$acl->setPrivilege($permission['privilege']);
    		$acl->setPolice(Common_Model_Acl::POLICE_ALLOW);
    		
    		$acl->save();
    	}
    	
    	unset($acl);
    	unset($permission);
    	//reset empty
    	$this->_permissions = array();
    	
    	return True;
    }
    
    
}
/**vim:sw=4 et ts=4 **/
?>