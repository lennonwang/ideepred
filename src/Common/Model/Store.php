<?php
/**
 * Model Common_Model_Store
 * 
 * generated by gen-model task.
 */
class Common_Model_Store extends Common_Model_Table_Store {
    
    //关系映射表
    protected $_relation_map = array(
        //展示图片
        'assets'=>array(
            'type'=>self::HAS_MANY,
            'class'=>'Common_Model_Asset',
            'foreign_key'=>'parent_id',
            'options'=>array(
                 'condition'=>'(parent_type=? or parent_type=?)',
                 'vars'=>array(Common_Model_Constant::STORE_THUMB,Common_Model_Constant::STORE_SHOW)
            )
        )
    );
    /**
     * 默认的magic field
     */
    protected $_magic_field = array(
       
    );
    /**
     * @return Common_Model_Store
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    
    /**
     * 验证输入数据
     * 
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#validate()
     */
    public function validate(){
        if($this->isNew()){
            $fields = array('title');   
        }else{
            $fields = array('id');
        }
        if(!$this->validateRequird($fields)){
            return false;
        }
        return true;
    }
    /**
     * afterValidation事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterValidation()
     */
    public function afterValidation(){
    	$payment = $this->getPayment();
    	if(!is_null($payment)){
    		$this->setPayment(serialize($payment));
    	}
    	
    }
    
    /**
     * afterDestroy事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterDestroy()
     */
    public function afterDestroy(){
    	//清除关联的附件
        $id = $this->getId();
        
        $asset = new Common_Model_Asset();
        $condition = 'parent_id=? AND (parent_type=? OR parent_type=?)';
        $vars = array($id,Common_Model_Constant::STORE_SHOW,Common_Model_Constant::STORE_THUMB);
        $asset->destroyAll($condition,$vars);
        unset($asset);
        
        return true;
    }
    /**
     * 所属的分类
     * 
     * @return string
     */
    public function _getCategoryPath($catcode=null){
    	if(is_null($catcode)){
    		$catcode = $this->getCatcode();
    	}
    	if(empty($catcode)){
    		return null;
    	}
    	
    	$category = new Common_Model_Category();
    	$category_path = $category->findRootNodePath($catcode);
    	
    	$path_ary = array();
    	if(!empty($category_path)){
    		for($i=0;$i<count($category_path);$i++){
    			$path_ary[] = $category_path[$i]['name'];
    		}
    	}
    	unset($category);
    	
    	return !empty($path_ary) ? implode(' :: ', $path_ary) : null;
    }
    
}
/**vim:sw=4 et ts=4 **/
?>