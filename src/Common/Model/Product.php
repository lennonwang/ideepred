<?php
/**
 * Model Common_Model_Product
 * 
 * generated by gen-model task.
 */
class Common_Model_Product extends Common_Model_Table_Product {
    
	const CHECK_STATE = 1;
	
	const DEAFULT_STATE = 0;
    //关系映射表
    protected $_relation_map = array(
        //附件
        'assets'=>array(
            'type'=>self::HAS_MANY,
            'class'=>'Common_Model_Asset',
            'foreign_key'=>'parent_id',
            'options'=>array(
                 'condition'=>'(parent_type=? or parent_type=? or parent_type=?)',
                 'vars'=>array(Common_Model_Constant::PRODUCT_THUMB,Common_Model_Constant::PRODUCT_WHOLE,Common_Model_Constant::PRODUCT_SOURCE)
            )
        )
        
    );
    /**
     * 默认的magic field
     */
    protected $_magic_field = array();
    /**
     * @return Common_Model_Product
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    
    /**
     * beforeValidation事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#beforeValidation()
     */
    public function beforeValidation(){}
    /**
     * 验证必要的字段值
     * 
     * @return bool
     */
    public function validate(){
        if($this->isNew()){
            $fields = array('title');
        }else{
            $fields = array('id');
        }
        if(!$this->validateRequird($fields)){
            return False;
        }
        
        return true;
    }
    /**
     * afterValidation事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterValidation()
     */
    public function afterValidation(){
    	//设置自定义ID
    	if($this->isNew()){
    		$this->setId($this->_GenProductCode());
    	}
    	
    	$state = $this->getState();
    	if($state == self::CHECK_STATE){
    		$this->setPublishedOn(Common_Util_Date::getNow());
    	}

		//当最新推荐
		$stick = $this->getStick();
		if($stick == 1){
			$this->setStickedOn(Common_Util_Date::getNow());
		}
		//当标识实体店铺推荐
		$markshop = $this->getMarkshop();
		if($markshop == 1){
			$this->setMarkedOn(Common_Util_Date::getNow());
		}
    }
    
    /**
     * afterSave事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterSave()
     */
    public function afterSave(){
        $this->remathCategoryProductTotal();
    }
    /**
     * afterDestroy事件
     * @see src/Anole/ActiveRecord/Anole_ActiveRecord_Base#afterDestroy()
     */
    public function afterDestroy(){
        $id = $this->getId();
        
        if(!empty($id)){
            self::debug("re product[$id] assets..", __METHOD__);
            
            $asset = new Common_Model_Asset();
            if(is_array($id)){
            	foreach($id as $pid){
            		$condition = 'parent_id=? AND (parent_type=? or parent_type=? or parent_type=?)';
            		$vars = array($pid,Common_Model_Constant::PRODUCT_THUMB,Common_Model_Constant::PRODUCT_WHOLE,Common_Model_Constant::PRODUCT_SOURCE);
            		
		            //删除产品的附件
		            $asset->destroyAll($condition,$vars);
            	}
            }else{
            	$condition = 'parent_id=? AND (parent_type=? or parent_type=? or parent_type=?)';
                $vars = array($id,Common_Model_Constant::PRODUCT_THUMB,Common_Model_Constant::PRODUCT_WHOLE,Common_Model_Constant::PRODUCT_SOURCE);
                
                //删除产品的附件
                $asset->destroyAll($condition,$vars);
            }
            
            unset($asset);
	       
	       //清除相关的meta
	       $meta = new Common_Model_Meta();
	       $meta->destroyAll('owner_id=? AND domain=?', array($id,Common_Model_Constant::PRODUCT_DOMAIN));
	       
	       unset($meta);
        }
       
        return true;
    }
    /**
     * 生产产品编号SKU
     * 
     * @return string
     */
    protected function _GenProductCode(){
    	$code = '91';
    	// add by wangjia 4 to 7
    	$code .= substr(time(),7);;
    	$code .= $this->_randString(2);
    	return $code;
    }
    
    /**
     * 产生一个特定长度的字符串
     * 
     * @param int $len
     * @param string $chars
     * @return string
     */
    protected function _randString($len, $chars='123456789'){
        $string = '';
        for($i=0;$i<$len;$i++){
            $pos = rand(0, strlen($chars)-1);
            $string .= $chars{$pos};
        }
        return $string;
    }
	/**
	 * 重新计算每个分类下的产品数
	 */
	public function remathCategoryProductTotal($catcode=null){
		if(is_null($catcode)){
			$catcode = $this->getCatcode();
		}
		if(!empty($catcode)){
			$condition = 'LEFT(`catcode`, '.strlen($catcode).') = ? AND state=?';
			$vars = array($catcode,self::CHECK_STATE);
			$cnt = $this->countIf($condition,$vars);
			
			Common_Event_Update::updateProductTotal($catcode,$cnt);
		}
	}
	/**
     * 更新产品的收藏次数(++)
     * 
     * @param int $id
     * @return void
     */
    public function updateFieldsCount($id=null,$field,$value='+1'){
    	if(is_null($id)){
    		$id = $this->getId();
    	}
    	if(empty($id)){
    		self::warn("update {$field} and id is Null!", __METHOD__);
    		throw new Common_Model_Exception("update {$field} and id is Null!");
    	}
    	$u_sql = "UPDATE ".$this->tablelize()." SET {$field}={$field}{$value} WHERE id=?";
    	return $this->getDba()->execute($u_sql, array($id));
    }
    
    /**
     * 构建产品完整数据，如添加分类，生产缩略图，标签等
     * 
     * @return array
     */
    public function completeProductList($product_list=array()){
        if(!empty($product_list)){
        	for($i=0;$i<count($product_list);$i++){
        		$pid = $product_list[$i]['id'];
        		
        		//生产缩略图
				$product_list[$i]['thumb_path'] = $product_list[$i]['thumb'];
        		$product_list[$i]['thumb'] = Common_Util_Storage::getAssetUrl(Common_Model_Constant::PRODUCT_DOMAIN,$product_list[$i]['thumb']);
        		
        	}
        }
        return $product_list;
    }
    /**
     * 获取推荐产品列表
     * 
     * @return array
     */
    public function findStickProductList($size=5,$page=1){
    	$condition = 'stick=? AND state=?';
    	$vars = array(1,1);
    	
    	$options = array(
    	    'condition'=>$condition,
    	    'vars'=>$vars,
    	    'page'=>$page,
    	    'size'=>$size,
    	    'order'=>'sticked_on DESC, id desc '
    	);
    	$product_list = $this->find($options)->getResultArray();
    	
    	return $this->completeProductList($product_list);
    }
    
    /**
     * 获取某订单下的产品列表
     *
     * @return array
     */
    public function findOrderProductList($orderId){
	   	$strSQL = 'select A.*,B.id,B.title,B.sale_price,B.catcode,B.category_id,B.thumb,B.state from `detail` AS A 
	   			INNER JOIN `product` AS B on A.product_id=B.id ';
	   	 //已审核的产品
	    $condition = ' A.orders_id=? ';
	    $vars =  array($orderId); 
	    if(!empty($condition)){
	    	$strSQL .= ' WHERE '.$condition;
	    }
	    $options = array(
	    		'vars'=>$vars
	    ); 
	    self::debug("findOrderProductList sql:::".$strSQL);
	    return $this->findBySql($strSQL,$options);
    }
    
    /**
     * 获取某订单下的产品列表
     *
     * @return array
     */
    public function findOrderCheckProductList($orderId){
    	$strSQL = 'select A.*,B.id,B.title,B.sale_price,B.catcode,B.category_id,B.thumb,B.state from `detail` AS A
    			 INNER JOIN `product` AS B on A.product_id=B.id ';
    	//已审核的产品
    	$condition = 'B.state=? AND A.orders_id=?';
    	$vars =  array(Common_Model_Product::CHECK_STATE, $orderId);
    	if(!empty($condition)){
    		$strSQL .= ' WHERE '.$condition;
    	}
    	$options = array(
    			'vars'=>$vars
    	);
    	return $this->findBySql($strSQL,$options);
    }
    /**
     * 更新产品的库存
     *
     * @param int $id
     * @return void
     */
    public function updateProductCount($id=null,$stock_value){
    	if(is_null($id)){
    		$id = $this->getId();
    	}
    	if(empty($id)){
    		self::warn("update stock and id is Null!", __METHOD__);
    		throw new Common_Model_Exception("update stock and id is Null!");
    	}
    	$u_sql = "UPDATE ".$this->tablelize()." SET stock = stock + ".$stock_value ." WHERE id=?";
    	self::debug("updateProductCount sql:::".$u_sql);
    	return $this->getDba()->execute($u_sql, array($id));
    }
    
  
    
}
/**vim:sw=4 et ts=4 **/
?>