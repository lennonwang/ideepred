<?php
/**
 * Model Common_Model_Orders
 * 
 * generated by gen-model task.
 */
class Common_Model_Orders extends Common_Model_Table_Orders {
	
	const WAIT_TIME = 3; # 3 days
	//默认运费
	private $_fees = 16;
    
    //关系映射表
    protected $_relation_map = array(
        'detail'=>array(
            'type'=>self::HAS_MANY,
            'class'=>'Common_Model_Detail',
            'foreign_key'=>'orders_id'
        )
    );
    /**
     * 付款方式
     * 
     * @var array
     */
    private $payment_methods = array(
        'a'=>array(
            'name'=>'支付宝',
            'summary'=>'支付宝作为诚信中立的第三方机构，充分保障货款安全及买卖双方利益,支持各大银行网上支付。'
        )
    );
    /**
     * 配送方式
     * 
     * @var array
     */
    private $transfer_methods = array(
        'a'=>array(
            'name'=>'普通快递',
            'freight'=>16,
        	'summary' => '北京地区8元，其他地区16元起'
        ),'b'=>array(
            'name'=>'EMS',
            'freight'=>22,
        	'summary' => '北京地区18，其他地区22元，北京地区超重30元，其他地区超重35元'
        ),'c'=>array(
            'name'=>'自提',
            'freight'=>0,
        	'summary' => '自提'
        )
    );
    /**
     * 送货时间
     * 
     * @var array
     */
    private $transfer_time = array(
        'a'=>'任意时间',
        'b'=>'星期一至星期五',
        'c'=>'星期六、日'
    );
    /**
     * 发票的内容类型
     */
    private $invoice_caty = array(
        'd'=>'明细',
        'o'=>'办公用品',
        's'=>'数码'
    );
    /**
     * 默认的magic field
     */
    protected $_magic_field = array();
    /**
     * @return Common_Model_Orders
     */
    public static function getModel($data=array(),$class=__CLASS__){
        return parent::getModel($data,$class);
    }
    /**
     * 返回对应的抬头类型
     * 
     * @param $key
     * @return mixed
     */
    public function findInvoiceCategory($key=null){
        if(is_null($key)){
            return $this->invoice_caty;
        }
        return isset($this->invoice_caty[$key]) ? $this->invoice_caty[$key] : null;
    }
    /**
     * 返回对应的付款方式
     * 
     * @return mixed
     */
    public function findPaymentMethods($key=null){
        if(is_null($key)){
            return $this->payment_methods;
        }
        return isset($this->payment_methods[$key]) ? $this->payment_methods[$key] : null;
    }
    /**
     * 返回对应的送货方式
     * 
     * @param string $key
     * @return mixed
     */
    public function findTransferMethods($key=null){
        if(is_null($key)){
            return $this->transfer_methods;
        }
        return isset($this->transfer_methods[$key]) ? $this->transfer_methods[$key] : null;
    }
    /**
     * 返回对应的送货时间
     * 
     * @param string $key
     * @return mixed
     */
    public function findTransferTime($key=null){
        if(is_null($key)){
            return $this->transfer_time;
        }
        return isset($this->transfer_time[$key]) ? $this->transfer_time[$key] : null;
    }
    
    public function beforeValidation(){
        if($this->isNew()){
            $created_on = $this->getCreatedOn();
            if(is_null($created_on)){
                //设置下订单时间
                $this->setCreatedOn(date('Y-m-d H:i:s'));
            }
        }
        return true;
    }
    
    
    public function validate(){
        if($this->isNew()){
            $fields = array('reference','total_money','name','email','address','mobie','user_id');
        }else{
            $fields = array('id');
        }
        if(!$this->validateRequird($fields)){
            return False;
        }
        return true;
    }
    
    public function afterDestroy(){
        $id = $this->getId();

        //删除此订单的详细记录
        $usql = 'DELETE FROM detail WHERE orders_id=?';
        $this->getDba()->execute($usql,array($id));
    }
    /**
     * 获取快递费用
   
	public function validateExpressFees($city,$overweight=false){
		$fees = $this->_fees;
		
		//超重
		if($overweight){
			$this->_fees = 18;
		}
		if($city == 1 || $city == '北京'){
			$this->_fees = 10;
		}
		return $this;
	}
	  */
	/**
	 * 支持计算多种快递和多个城市计算快递费用
	 * @param unknown_type $key
	 * @param unknown_type $city
	 * @return Common_Model_Orders
	 */
	public function validateExpressFeesByKey($key,$city ,$overweight=false){
		$fees = $this->_fees;
		if($key){
			$transferMethods = $this-> findTransferMethods($key);
			 $this->_fees = $transferMethods['freight'];
		} 
		if($key && $key=='a'){
			if($city == 1 || $city == '北京'){
				$this->_fees = 8;
			}
		}
		if($key && $key=='b'){
			if($city == 1 || $city == '北京'){
				$this->_fees = 18;
			}
		}
		return $this;
	}
	
	/**
     * 获取快递费用
     */
	public function getFees(){
		return $this->_fees;
	}
    /**
     * 重新计算订单的金额
     * 
     * @return string
     */
    public function recalculate($order_id=null){
        if(is_null($order_id)){
            $order_id = $this->getId();
        }
        if(empty($order_id)){
            throw new Common_Model_Exception('重新计算订单金额的ID为空');
        }
        $detail = new Common_Model_Detail();
        $options = array(
            'condition'=>'orders_id=?',
            'vars'=>array($order_id)
        );
        $data = $detail->find($options)->getResultArray();
        
        for($i=0;$i<count($data);$i++){
            $total_money += $data[$i]['quantity']*$data[$i]['price'];
        }
        if(!is_null($total_money)){
            $usql = 'UPDATE orders SET total_money=? WHERE id=?';
            $this->getDba()->execute($usql,array($total_money,$order_id));
        }
        unset($detail);
        
        return $total_money;
    }
    
    /**
     * 添加订单明细信息
     * 
     * @param int $product_id
     * @param float $price
     * @param int $quantity
     * @return Common_Model_Orders
     */
    public function AddOrderDetails($user_id,$product_id,$sale_price,$price,$quantity=1,$size=null){
    	$discount = round($true_price/$price,2);
        $data = array(
           'user_id'=>$user_id,
           'product_id'=>$product_id,
           'size'=>$size,
           'discount'=>$discount,
           'true_price'=>$price,
           'price'=>$sale_price,
           'quantity'=>$quantity
        );
        $this->addRelationModelData('detail', $data);
        
        return $this;
    }
    
    public function setOrderCanceled($id=null){
        $status = Common_Model_Constant::ORDER_CANCELED;
        $this->_updateOrderStatus($status,$id);
    }
    /**
     * 设置订单的状态为等待付款
     * 
     * @param int $id
     * @return void
     */
    public function setWaitPayment($id=null){
        $status = Common_Model_Constant::ORDER_WAIT_PAYMENT;
        $this->_updateOrderStatus($status,$id);
    }
    /**
     * 设置订单的状态为正在配货
     * 
     * @param int $id
     * @return void
     */
    public function setReadyGoods($id=null){
        $status = Common_Model_Constant::ORDER_READY_GOODS;
        $this->_updateOrderStatus($status,$id);
    }
    /**
     * 设置订单的状态为已发货状态
     * 
     * @param int $id
     * @return void
     */
    public function setSendedGoods($id=null){
        $status = Common_Model_Constant::ORDER_SENDED_GOODS;
        $this->_updateOrderStatus($status,$id);
    }
    /**
     * 设置订单的状态为已完成状态
     * 
     * @param int $id
     * @return void
     */
    public function setOrderPublished($id=null){
        $status = Common_Model_Constant::ORDER_PUBLISHED;
        $this->_updateOrderStatus($status,$id);
    }
    /**
     * 更新订单的处理状态
     * 
     * @param int $status
     * @param int $id
     * @return bool
     */
    protected function _updateOrderStatus($status,$id=null){
        if(is_null($id)){
            $id = $this->getId();
        }
        if(empty($id)){
            throw new Common_Model_Exception('Order id is Null');
        }
        $this->setId($id);
        $this->setIsNew(false);
        $this->setStatus($status);
        try{
            $this->save();
        }catch(Anole_ActiveRecord_Exception $e){
            throw $e;
        }
        return true;
    }
}
/**vim:sw=4 et ts=4 **/
?>